* ----------------------------------------------------------------------
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
* ----------------------------------------------------------------------
REPORT ZPLUNK_CAPTURE NO STANDARD PAGE HEADING LINE-SIZE 255.

LOAD-OF-PROGRAM.

  INCLUDE TSKHINCL.
  INCLUDE ZPLUNK0001.                 " Global variables
  INCLUDE ZPLUNK0002.                 " Time Functions
  INCLUDE ZPLUNK0003.                 " SM04 User List
  INCLUDE ZPLUNK0004.                 " SM04 Memory List
  INCLUDE ZPLUNK0005.                 " ST03N Write
  INCLUDE ZPLUNK0006.                 " ST03N Collect
  INCLUDE ZPLUNK0007.                 " SM21 System Log
  INCLUDE ZPLUNK0008.                 " CCMS Alerts
  INCLUDE ZPLUNK0009.                 " SM50 Workload Overview
  INCLUDE ZPLUNK0010.                 " Print Jobs
  INCLUDE ZPLUNK0011.                 " SM20 Security Audit Logs

START-OF-SELECTION.

  SELECTION-SCREEN BEGIN OF BLOCK BLOCK1 WITH FRAME TITLE TEXT-500.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-431.
  PARAMETERS: P_TIMZ TYPE SWNCTIMEZONE DEFAULT SY-ZONLO.
  SELECTION-SCREEN COMMENT 35(20) TEXT-432.
  PARAMETERS: RBD1 RADIOBUTTON GROUP RBLD DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 70(20) TEXT-433.
  PARAMETERS: P_KEEP TYPE INT2 DEFAULT 14.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 35(20) TEXT-434.
  PARAMETERS: RBD2 RADIOBUTTON GROUP RBLD.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK BLOCK1.

  SELECTION-SCREEN BEGIN OF BLOCK BLOCK2 WITH FRAME TITLE TEXT-530.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-531.
  PARAMETERS: RBL1 RADIOBUTTON GROUP RBLG DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 35(20) TEXT-532.
  PARAMETERS: RBL2 RADIOBUTTON GROUP RBLG.
  SELECTION-SCREEN COMMENT 70(20) TEXT-533.
  PARAMETERS: RBL3 RADIOBUTTON GROUP RBLG.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-534.
  PARAMETERS: RBL4 RADIOBUTTON GROUP RBLG.
  SELECTION-SCREEN COMMENT 35(20) TEXT-535.
  PARAMETERS: RBL5 RADIOBUTTON GROUP RBLG.
  SELECTION-SCREEN COMMENT 70(20) TEXT-536.
  PARAMETERS: RBL6 RADIOBUTTON GROUP RBLG.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-537.
  PARAMETERS: RBL7 RADIOBUTTON GROUP RBLG.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK BLOCK2.

  SELECTION-SCREEN BEGIN OF BLOCK BLOCK3 WITH FRAME TITLE TEXT-550.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-551.
  PARAMETERS: RBM1 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN COMMENT 35(20) TEXT-552.
  PARAMETERS: RBM2 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN COMMENT 70(20) TEXT-553.
  PARAMETERS: RBM3 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-554.
  PARAMETERS: RBM4 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN COMMENT 35(20) TEXT-555.
  PARAMETERS: RBM5 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN COMMENT 70(20) TEXT-556.
  PARAMETERS: RBM6 RADIOBUTTON GROUP RBMS DEFAULT 'X'.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-557.
  PARAMETERS: RBM7 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN COMMENT 35(20) TEXT-558.
  PARAMETERS: RBM8 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN COMMENT 70(20) TEXT-559.
  PARAMETERS: RBM9 RADIOBUTTON GROUP RBMS.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK BLOCK3.

  SELECTION-SCREEN BEGIN OF BLOCK BLOCK4 WITH FRAME TITLE TEXT-600.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-540.
  PARAMETERS: P_ST03_1 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 35(20) TEXT-544.
  PARAMETERS: P_ST03_2 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 70(20) TEXT-545.
  PARAMETERS: P_ST03_3 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-541.
  PARAMETERS: P_SM21 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 35(20) TEXT-543.
  PARAMETERS: P_CCMS_A AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 70(20) TEXT-546.
  PARAMETERS: P_SPOOL AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-547.
  PARAMETERS: P_SM20 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK BLOCK4.

  SELECTION-SCREEN BEGIN OF BLOCK BLOCK5 WITH FRAME TITLE TEXT-630.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-560.
  PARAMETERS: P_SM04_1 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 35(20) TEXT-561.
  PARAMETERS: P_SM04_2 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 70(20) TEXT-562.
  PARAMETERS: P_CCMS_C AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN COMMENT 1(20) TEXT-563.
  PARAMETERS: P_SM50 AS CHECKBOX DEFAULT 'X'.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK BLOCK5.

  L_CUT = SY-DATUM - P_KEEP.
  L_DATEL = SY-DATUM.
  L_TIMEL = SY-UZEIT.
  IF RBL1 = 'X'.
    PERFORM REWIND_TIME_TO_WHOLE USING 60 CHANGING L_DATEL L_TIMEL.
  ELSEIF RBL2 = 'X'.
    PERFORM REWIND_TIME_TO_WHOLE USING 30 CHANGING L_DATEL L_TIMEL.
  ELSEIF RBL3 = 'X'.
    PERFORM REWIND_TIME_TO_WHOLE USING 15 CHANGING L_DATEL L_TIMEL.
  ELSEIF RBL4 = 'X'.
    PERFORM REWIND_TIME_TO_WHOLE USING 10 CHANGING L_DATEL L_TIMEL.
  ELSEIF RBL5 = 'X'.
    PERFORM REWIND_TIME_TO_WHOLE USING 5 CHANGING L_DATEL L_TIMEL.
  ELSEIF RBL6 = 'X'.
    PERFORM REWIND_TIME_TO_WHOLE USING 1 CHANGING L_DATEL L_TIMEL.
  ELSEIF RBL7 = 'X'.
    " Do diddly squat
  ENDIF.
  L_DATET = L_DATEL.
  L_TIMET = L_TIMEL.
  PERFORM REWIND_TIME_SECS USING 1 CHANGING L_DATET L_TIMET.

  L_DATEF = L_DATEL.
  L_TIMEF = L_TIMEL.
  IF RBM1 = 'X'.
    L_PSECS = 60.
  ELSEIF RBM2 = 'X'.
    L_PSECS = 300.
  ELSEIF RBM3 = 'X'.
    L_PSECS = 600.
  ELSEIF RBM4 = 'X'.
    L_PSECS = 900.
  ELSEIF RBM5 = 'X'.
    L_PSECS = 1800.
  ELSEIF RBM6 = 'X'.
    L_PSECS = 3600.
  ELSEIF RBM7 = 'X'.
    L_PSECS = 28800.
  ELSEIF RBM8 = 'X'.
    L_PSECS = 43200.
  ELSEIF RBM9 = 'X'.
    L_PSECS = 86400.
  ENDIF.
  PERFORM REWIND_TIME_SECS USING L_PSECS CHANGING L_DATEF L_TIMEF.

END-OF-SELECTION.
  IF P_TIMZ = ''.
    P_TIMZ = SY-ZONLO.
  ENDIF.

  CALL FUNCTION 'SUBST_READ_SYS_ENVIRONMENT'
    EXPORTING
      IV_SERVER  = ' '
    IMPORTING
      EV_HOST    = L_HOST
      EV_SYSNAME = L_SYSNAME
      EV_SYSNR   = L_SYSNR
      EV_HOMEDIR = L_WORKDIR.

  WRITE:/ 'Splunk Capture Log'.
  ULINE.
  WRITE:/ 'Host:                 ',L_HOST.
  WRITE:/ 'SID:                  ',L_SYSNAME.
  WRITE:/ 'System Number:        ',L_SYSNR.
  WRITE:/ 'Time Zone:            ',P_TIMZ.
  WRITE:/ 'Log Timestamp:        ',L_DATEL,L_TIMEL.
  WRITE:/ 'Data Collected From:  ',L_DATEF,L_TIMEF.
  WRITE:/ 'Data Collected To:    ',L_DATET,L_TIMET.
  IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
    WRITE:/ 'Purge Data After:  ',P_KEEP,'days'.
  ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
    WRITE:/ 'Purge Data After:      Retrieved by Splunk'.
  ELSE.
    WRITE:/ 'Purge only done by jobs run on central instance'.
  ENDIF.
  WRITE:/.

  IF P_ST03_1 = 'X' OR P_ST03_2 = 'X' OR P_ST03_3 = 'X'.
    PERFORM CALL_SWNC_READ_SNAPSHOT  USING P_TIMZ L_DATEF L_TIMEF L_DATET L_TIMET.
    IF P_ST03_1 = 'X'.
      DO 30 TIMES.
        CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
          EXPORTING
            DATASET     = 'TASKTYPE'
            EXPIRY_DATE = L_DATEF
            EXPIRY_TIME = L_TIMEF
          IMPORTING
            RESULT      = L_RESULT.
        IF L_RESULT EQ 'N'.
          EXIT.
        ENDIF.
        CALL FUNCTION 'ENQUE_SLEEP'
          EXPORTING
            SECONDS = 1.
      ENDDO.
      IF L_RESULT EQ 'N'.
        CALL METHOD ZPLUNK_COMMON=>LOCK
          EXPORTING
            DATASET = 'TASKTYPE'
          IMPORTING
            RESULT  = L_RESULT.
        PERFORM WRITE_ZPLUNK_ST03N USING L_DATEL L_TIMEL L_HOST L_SYSNAME L_SYSNR.
        CALL METHOD ZPLUNK_COMMON=>UNLOCK
          EXPORTING
            DATASET = 'TASKTYPE'
          IMPORTING
            RESULT  = L_RESULT.
      ENDIF.
    ENDIF.
    IF P_ST03_2 = 'X'.
      DO 30 TIMES.
        CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
          EXPORTING
            DATASET     = 'ST03N_TRN'
            EXPIRY_DATE = L_DATEF
            EXPIRY_TIME = L_TIMEF
          IMPORTING
            RESULT      = L_RESULT.
        IF L_RESULT EQ 'N'.
          EXIT.
        ENDIF.
        CALL FUNCTION 'ENQUE_SLEEP'
          EXPORTING
            SECONDS = 1.
      ENDDO.
      IF L_RESULT EQ 'N'.
        CALL METHOD ZPLUNK_COMMON=>LOCK
          EXPORTING
            DATASET = 'ST03N_TRN'
          IMPORTING
            RESULT  = L_RESULT.
        PERFORM WRITE_ZPLUNK_ST03N_TRN USING L_DATEL L_TIMEL L_HOST L_SYSNAME L_SYSNR.
        CALL METHOD ZPLUNK_COMMON=>UNLOCK
          EXPORTING
            DATASET = 'ST03N_TRN'
          IMPORTING
            RESULT  = L_RESULT.
      ENDIF.
    ENDIF.
    IF P_ST03_3 = 'X'.
      DO 30 TIMES.
        CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
          EXPORTING
            DATASET     = 'ST03N_FE'
            EXPIRY_DATE = L_DATEF
            EXPIRY_TIME = L_TIMEF
          IMPORTING
            RESULT      = L_RESULT.
        IF L_RESULT EQ 'N'.
          EXIT.
        ENDIF.
        CALL FUNCTION 'ENQUE_SLEEP'
          EXPORTING
            SECONDS = 1.
      ENDDO.
      IF L_RESULT EQ 'N'.
        CALL METHOD ZPLUNK_COMMON=>LOCK
          EXPORTING
            DATASET = 'ST03N_FE'
          IMPORTING
            RESULT  = L_RESULT.
        PERFORM WRITE_ZPLUNK_ST03N_FE USING L_DATEL L_TIMEL L_HOST L_SYSNAME L_SYSNR.
        CALL METHOD ZPLUNK_COMMON=>UNLOCK
          EXPORTING
            DATASET = 'ST03N_FE'
          IMPORTING
            RESULT  = L_RESULT.
      ENDIF.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_ST03N WHERE SAMPLEDATE < L_CUT.
      DELETE FROM ZPLUNK_ST03N_FE WHERE SAMPLEDATE < L_CUT.
      DELETE FROM ZPLUNK_ST03N_TRN WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_ST03N WHERE SENT = 'X'.
      DELETE FROM ZPLUNK_ST03N_FE WHERE SAMPLEDATE < L_CUT.
      DELETE FROM ZPLUNK_ST03N_TRN WHERE SAMPLEDATE < L_CUT.
    ENDIF.
  ENDIF.
  IF P_SM21 = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'SM21'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'SM21'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM ZPLUNK_SM21.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'SM21'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM21 WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM21 WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_SM20 = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'SM20'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'SM20'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM ZPLUNK_SM20 USING L_SYSNAME L_SYSNR L_DATEF L_TIMEF L_DATET L_TIMET.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'SM20'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM20 WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM20 WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_SM04_1 = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'SM04USR'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'SM04USR'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM SM04_USER USING L_HOST L_SYSNAME L_SYSNR.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'SM04USR'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM04USR WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM04USR WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_SM04_2 = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'SM04MEM'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'SM04MEM'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM SM04_MEMORY USING L_HOST L_SYSNAME L_SYSNR.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'SM04MEM'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM04MEM WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM04MEM WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_SM50 = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'SM50'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'SM50'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM SM50 USING  L_DATEL L_TIMEL L_HOST L_SYSNAME L_SYSNR.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'SM50'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM50 WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SM50 WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_SPOOL = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'SPOOL'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'SPOOL'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM GETSPOOL USING  L_DATEL L_TIMEL L_SYSNAME L_SYSNR L_DATEF L_TIMEF L_DATET L_TIMET.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'SPOOL'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SPOOL WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_SPOOL WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_CCMS_C = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'CCMS_C'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'CCMS_C'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM ZPLUNK_CCMS_C.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'CCMS_C'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
  ENDIF.
  IF P_CCMS_C = 'X'.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_CCMS_C WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_CCMS_C WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
  IF P_CCMS_A = 'X'.
    DO 30 TIMES.
      CALL METHOD ZPLUNK_COMMON=>CHECKLOCK
        EXPORTING
          DATASET     = 'CCMS_A'
          EXPIRY_DATE = L_DATEF
          EXPIRY_TIME = L_TIMEF
        IMPORTING
          RESULT      = L_RESULT.
      IF L_RESULT EQ 'N'.
        EXIT.
      ENDIF.
      CALL FUNCTION 'ENQUE_SLEEP'
        EXPORTING
          SECONDS = 1.
    ENDDO.
    IF L_RESULT EQ 'N'.
      CALL METHOD ZPLUNK_COMMON=>LOCK
        EXPORTING
          DATASET = 'CCMS_A'
        IMPORTING
          RESULT  = L_RESULT.
      PERFORM ZPLUNK_CCMS_A.
      CALL METHOD ZPLUNK_COMMON=>UNLOCK
        EXPORTING
          DATASET = 'CCMS_A'
        IMPORTING
          RESULT  = L_RESULT.
    ENDIF.
  ENDIF.
  IF P_CCMS_A = 'X'.
    IF RBD1 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_CCMS_A WHERE SAMPLEDATE < L_CUT.
    ELSEIF RBD2 = 'X' AND SY-HOST = L_CI_HOST.
      DELETE FROM ZPLUNK_CCMS_A WHERE SENT = 'X'.
    ENDIF.
  ENDIF.
