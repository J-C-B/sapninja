*&---------------------------------------------------------------------*
*&  Include           ZPLUNK0007 - SM21 System Log
*&---------------------------------------------------------------------*
* ----------------------------------------------------------------------
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
* ----------------------------------------------------------------------
FORM ZPLUNK_SM21.
  DATA: CPU_ID(8),
        DY_START_FILE_N6(6)  TYPE N,
        DY_START_POS_N10(10) TYPE N,
        DY_STOP_FILE_N6(6)   TYPE N,
        DY_STOP_POS_N10(10)  TYPE N,
        PAGES LIKE RSLGLAYOUT-MAXPAG,
        IGNORE_IDS_CNT TYPE I,
        L_PARAM TYPE ZPLUNK_PARAMS,
        L_VERSOK TYPE ZPLUNK_TXT1,
        MTAB_PROGRAM_SOURCE TYPE TABLE OF TXT255.

* The system log function is sensitive about component version.  Check that we have installed the code for the
* current version.  If this is a new installation, or you have done an SAP_BASIS upgrade, these steps will be
* re-executed for the new version.  Quite a sexy little trick.
* Find the current patch version of SAP_BASIS
  SELECT SINGLE *
  FROM PAT03
  INTO L_PAT03
  WHERE COMPONENT = 'SAP_BASIS'.
  IF SY-SUBRC = 0.
    L_COMP_REL = L_PAT03-COMP_REL.
  ELSE.
    L_COMP_REL = '700'.
  ENDIF.
* Now check our parameter table to make sure that we have modified the code in ZPLUNKSAPMSM21 to match the
* current version.  If we have, then continue, otherwise make the changes and set the parameter
  L_VERSOK = 'N'.
  SELECT SINGLE *
  INTO L_PARAM
  FROM ZPLUNK_PARAMS
  WHERE PARAM = 'SM21VERS'.
  IF SY-SUBRC EQ 0.
    IF L_PARAM = L_COMP_REL.
      L_VERSOK = 'Y'.
    ELSE.
      DELETE FROM ZPLUNK_PARAMS WHERE PARAM = 'SM21VERS'.
    ENDIF.
  ENDIF.
  IF L_VERSOK = 'N'.
* Read the standard code, make our modifications and dump into ZPLUNKMSM21
    READ REPORT 'SAPMSM21' INTO MTAB_PROGRAM_SOURCE.
    APPEND  'FORM ZPLUNK_CAPTURE USING P_HOST P_SYSNAME P_SYSNR.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '   DATA: L_GTYPE_OUTLINE TYPE GTYPE_OUTLINE.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '   DATA LT_SM21 TYPE ZPLUNK_SM21.' TO MTAB_PROGRAM_SOURCE.
    APPEND  ' ' TO MTAB_PROGRAM_SOURCE.
    APPEND  '   LOOP AT GT_GEN_OUTLINE INTO L_GTYPE_OUTLINE.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      CLEAR LT_SM21.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      CALL FUNCTION ''CONVERT_DATE_TO_INTERNAL''' TO MTAB_PROGRAM_SOURCE.
    APPEND  '         EXPORTING DATE_EXTERNAL = L_GTYPE_OUTLINE-DATE' TO MTAB_PROGRAM_SOURCE.
    APPEND  '         IMPORTING DATE_INTERNAL = LT_SM21-SAMPLEDATE.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      CONCATENATE L_GTYPE_OUTLINE-TIME+0(2) L_GTYPE_OUTLINE-TIME+3(2) L_GTYPE_OUTLINE-TIME+6(2) INTO LT_SM21-SAMPLETIME.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      REPLACE '':'' WITH '''' INTO LT_SM21-SAMPLETIME.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-HOST = P_HOST.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-SYSNAME = P_SYSNAME.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-SYSNR = P_SYSNR.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-WPTYPE = L_GTYPE_OUTLINE-TSKNA.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-WPNO = L_GTYPE_OUTLINE-TSKNU.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-MANDT = L_GTYPE_OUTLINE-MAND.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-BNAME = L_GTYPE_OUTLINE-USER.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-TCODE = L_GTYPE_OUTLINE-TRANSCODE.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-REPNAME = L_GTYPE_OUTLINE-REPNA.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-TERM = L_GTYPE_OUTLINE-TERMINAL.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-DEVCLASS = L_GTYPE_OUTLINE-DEVCLASS.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-AREA = L_GTYPE_OUTLINE-AREA.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-SUBID = L_GTYPE_OUTLINE-SUBID.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      LT_SM21-ERRMSG = L_GTYPE_OUTLINE-TEXT.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '      INSERT INTO ZPLUNK_SM21 VALUES LT_SM21.' TO MTAB_PROGRAM_SOURCE.
    APPEND  '   ENDLOOP.' TO MTAB_PROGRAM_SOURCE.
    APPEND  'ENDFORM.' TO MTAB_PROGRAM_SOURCE.
    MODIFY MTAB_PROGRAM_SOURCE INDEX 1 FROM 'PROGRAM ZPLUNKSAPMSM21 MESSAGE-ID SL NO STANDARD PAGE HEADING.'.
    MODIFY MTAB_PROGRAM_SOURCE INDEX 2 FROM ''.
    INSERT REPORT 'ZPLUNKSAPMSM21' FROM MTAB_PROGRAM_SOURCE.

* Update the parameter indicating success
    L_PARAM-PARAM = 'SM21VERS'.
    L_PARAM-VALUE = L_COMP_REL.
    INSERT INTO ZPLUNK_PARAMS VALUES L_PARAM.
  ENDIF.


  PERFORM SET_SURPRESS_POPUPS(ZPLUNKSAPMSM21).
  PERFORM INIT_ME(ZPLUNKSAPMSM21) USING CPU_ID.

  CALL FUNCTION 'RSLG_SEL_ST_WHICHLOG_ALV'
    EXPORTING
      FILE = 'L'. "REP_ON_LOCAL.
  PERFORM INIT_INTERN_TAB_ALV(ZPLUNKSAPMSM21).
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_TABE_ALV'
    EXPORTING
      WITH_COLUMN = 'X'.
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_DEVC_ALV'
    EXPORTING
      WITH_COLUMN = 'X'.
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_POSI_ALV'
    EXPORTING
      WITH_COLUMN = ' '.
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_MAND_ALV'
    EXPORTING
      WITH_COLUMN = 'X'.
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_DATE_ALV'
    EXPORTING
      WITH_COLUMN = ' '.
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_PROG_ALV'
    EXPORTING
      WITH_COLUMN = 'X'.
  CALL FUNCTION 'RSLG_LAYOUT_ST_COL_TERM_ALV'
    EXPORTING
      WITH_COLUMN = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_PARAREC_ALV'
    EXPORTING
      WITH_LINE = ' '.

  CALL FUNCTION 'RSLG_SEL_ST_TIMES_ALV'
    EXPORTING
      SDATE = L_DATEF
      STIME = L_TIMEF
      EDATE = L_DATET
      ETIME = L_TIMET.

  CALL FUNCTION 'RSLG_SEL_ST_TASK_TYPNUM_ALV'
    EXPORTING
      TYP = ' '
      NUM = ' '.

  CALL FUNCTION 'RSLG_SEL_ST_USER_ALV'
    EXPORTING
      USER = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_TCODE_ALV'
    EXPORTING
      TCODE = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_REPNA_ALV'
    EXPORTING
      REPNA = ' '.
  PAGES = 80.
  CALL FUNCTION 'RSLG_LAYOUT_ST_PAGES_ALV'
    EXPORTING
      PAGES = 80.
  CALL FUNCTION 'RSLG_LAYOUT_ST_STATS_ALV'
    EXPORTING
      WITH_STATISTICS = ' '.
  CALL FUNCTION 'RSLG_LAYOUT_ST_SORT_ALV'
    EXPORTING
      ORDER = 'SOFI'.
  DY_START_FILE_N6 = 0.
  DY_START_POS_N10 = 0.
  DY_STOP_FILE_N6  = 0.
  DY_STOP_POS_N10  = 0.

  CALL FUNCTION 'RSLG_SEL_ST_POSI_ALV'
    EXPORTING
      SFILE_NO = DY_START_FILE_N6
      SPOS     = DY_START_POS_N10
      EFILE_NO = DY_STOP_FILE_N6
      EPOS     = DY_STOP_POS_N10.

  CALL FUNCTION 'RSLG_SEL_ST_LOGT_ALV'
    EXPORTING
      ENTRYTYPE = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_TERM_ALV'
    EXPORTING
      TERMINAL = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_DEVCLASS_ALV'
    EXPORTING
      DEVCLASS = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_CLASIDS_ALV'
    EXPORTING
      CID1 = ' '
      CID2 = ' '
      CID3 = ' '
      CID4 = ' '
      CID5 = ' '
      CID6 = ' '.
  CALL FUNCTION 'RSLG_SEL_ST_INTERNRECS_ALV'
    EXPORTING
      WITH_LINE = ' '.

  WRITE:/ 'Collecting ... SM21 System Log'.
  PERFORM PREPARE_A_LIST(ZPLUNKSAPMSM21).
  PERFORM WRITE_DYNPRO_ALV(ZPLUNKSAPMSM21).
  PERFORM READ_SYSLOG_ALV(ZPLUNKSAPMSM21).
  PERFORM WRITE_LIST_ABOUT_SYSLOG_ALV(ZPLUNKSAPMSM21).
  PERFORM ZPLUNK_CAPTURE(ZPLUNKSAPMSM21) USING L_HOST L_SYSNAME L_SYSNR.
  COMMIT WORK.
ENDFORM.                    "ZPLUNK_SM21
